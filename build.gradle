plugins {
	id 'java'
	id 'eclipse'
	id 'net.minecraftforge.gradle' version '5.1.+'
}

archivesBaseName = "${mod_name}-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
	mappings channel: 'official', version: minecraft_version
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
	runs {
		client {
			workingDirectory project.file('run')
			taskName project.name + ' Client'
			
			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			// property 'forge.logging.markers', 'REGISTRIES'
			
			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			// property 'forge.logging.console.level', 'debug'
			
			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			// property 'forge.enabledGameTestNamespaces', "${mod_id}"
			
			mods {
				modSource {
					source sourceSets.main
				}
			}
		}
		
		server {
			workingDirectory project.file('run')
			taskName project.name + ' Server'
			
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			// property 'forge.enabledGameTestNamespaces', 'examplemod'
			
			mods {
				modSource {
					source sourceSets.main
				}
			}
		}
		
		// This run config launches GameTestServer and runs all registered gametests, then exits.
		// By default, the server will crash when no gametests are provided.
		// The gametest system is also enabled by default for other run configs under the /test command.
		gameTestServer {
			workingDirectory project.file('run')
			taskName project.name + ' GameTestServer'
			
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			// property 'forge.enabledGameTestNamespaces', 'examplemod'
			
			mods {
				modSource {
					source sourceSets.main
				}
			}
		}
		
		data {
			workingDirectory project.file('run')
			taskName project.name + ' Data'
			
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			
			args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			
			mods {
				modSource {
					source sourceSets.main
				}
			}
		}
	}
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
	// Put repositories for dependencies here
	// ForgeGradle automatically adds the Forge maven and Maven Central for you
	
	// If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
	// flatDir {
	//	 dir 'libs'
	// }
}

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	
	// Real mod deobf dependency examples - these get remapped to your current mappings
	// compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
	// runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
	// implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency
	
	// Examples using mod jars from ./libs
	// implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
	
	// For more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
}

jar {
	manifest {
		attributes([
			"Specification-Title": "${mod_id}",
			"Specification-Vendor": "${author}",
			"Specification-Version": "1",
			"Implementation-Title": "${mod_name}",
			"Implementation-Version": "${minecraft_version}-${version}",
			"Implementation-Vendor": "${author}",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"Main-Class": "${main_class}"
		])
	}
}

processResources {
	outputs.upToDateWhen {
		false
	}
	
	from sourceSets.main.resources
	
    filesMatching(['META-INF/mods.toml']) {
        expand project.properties
    }
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
